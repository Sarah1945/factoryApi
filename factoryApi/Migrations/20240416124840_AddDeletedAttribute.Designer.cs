// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using factoryApi.Context;

#nullable disable

namespace factoryApi.Migrations
{
    [DbContext(typeof(FactoryDbContext))]
    [Migration("20240416124840_AddDeletedAttribute")]
    partial class AddDeletedAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("factoryApi.Model.FlowRecord", b =>
                {
                    b.Property<int>("FlowRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowRecordId"));

                    b.Property<DateTime>("FlowRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlowRecordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationActionId")
                        .HasColumnType("int");

                    b.HasKey("FlowRecordId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RegistrationActionId");

                    b.ToTable("FlowRecords");
                });

            modelBuilder.Entity("factoryApi.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("factoryApi.Model.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStatusId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStatusId");

                    b.ToTable("ProductStatus");
                });

            modelBuilder.Entity("factoryApi.Model.ProductionCapacity", b =>
                {
                    b.Property<int>("ProductionCapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionCapacityId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionCapacityAmount")
                        .HasColumnType("int");

                    b.Property<string>("ProductionCapacityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductionCapacityId");

                    b.ToTable("ProductionCapacities");
                });

            modelBuilder.Entity("factoryApi.Model.ProductionLine", b =>
                {
                    b.Property<int>("ProductionLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionLineId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionCapacityId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionLineDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionLineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductionLineId");

                    b.HasIndex("ProductionCapacityId");

                    b.ToTable("ProductionLines");
                });

            modelBuilder.Entity("factoryApi.Model.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderPhone")
                        .HasColumnType("int");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("factoryApi.Model.RawMaterial", b =>
                {
                    b.Property<int>("RawMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RawMaterialId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("RawMaterialDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawMaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RawMaterialId");

                    b.HasIndex("ProviderId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("factoryApi.Model.RawMaterialProduct", b =>
                {
                    b.Property<int>("RawMaterialProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RawMaterialProductId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialProductStock")
                        .HasColumnType("int");

                    b.HasKey("RawMaterialProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("RawMaterialProducts");
                });

            modelBuilder.Entity("factoryApi.Model.RegistrationAction", b =>
                {
                    b.Property<int>("RegistrationActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationActionId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegistrationActionId");

                    b.ToTable("RegistrationActions");
                });

            modelBuilder.Entity("factoryApi.Model.FlowRecord", b =>
                {
                    b.HasOne("factoryApi.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factoryApi.Model.RegistrationAction", "RegistrationAction")
                        .WithMany()
                        .HasForeignKey("RegistrationActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RegistrationAction");
                });

            modelBuilder.Entity("factoryApi.Model.Product", b =>
                {
                    b.HasOne("factoryApi.Model.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factoryApi.Model.ProductionLine", "ProductionLine")
                        .WithMany()
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductStatus");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("factoryApi.Model.ProductionLine", b =>
                {
                    b.HasOne("factoryApi.Model.ProductionCapacity", "ProductionCapacity")
                        .WithMany()
                        .HasForeignKey("ProductionCapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionCapacity");
                });

            modelBuilder.Entity("factoryApi.Model.RawMaterial", b =>
                {
                    b.HasOne("factoryApi.Model.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("factoryApi.Model.RawMaterialProduct", b =>
                {
                    b.HasOne("factoryApi.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factoryApi.Model.RawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RawMaterial");
                });
#pragma warning restore 612, 618
        }
    }
}
